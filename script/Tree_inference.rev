###Script analysis generated by RevScripter###

data = readDiscreteCharacterData("dsDNA_cynipoidea_virus.nxs")

# Get some useful variables from the data. We need these later on.
num_taxa <- data.ntaxa()
num_branches <- 2 * num_taxa - 3
taxa <- data.taxa()

moves    = VectorMoves()
monitors = VectorMonitors()

num_char_states <- 4

######################
# Substitution Model #
######################


# From partition finders 

[set model for every partition]

  prset applyto=(3,8,13,22) aamodelpr=fixed(vt);
  prset applyto=(18,20) aamodelpr=fixed(jones); [this is JTT]
  prset applyto=(4,16,19,27,19,20,31) aamodelpr=fixed(blossum62);
  prset applyto=(21,25) aamodelpr=fixed(wag+F);
  prset applyto=(1,2,5,6,7,9,10,11,12,14,15,17,23,24,26,28,32) aamodelpr=fixed(lg);

  [F + I + G4]
  lset applyto=(1,2,9,11,17,21,23,28,32) ; prset statefreqpr=fixed(empirical); lset rates=invgamma ngammacat=4;

  [I+G4]
  lset applyto=(4,16,19,27,29,30,31); lset rates=invgamma ngammacat=4;

  [F+G4]
  lset applyto=(3,7,12,13,15,20,25,26) rates=gamma ngammacat=4;

  [I]
  [lset applyto=(10) rates=propinv;]

  [G4]
  lset applyto=(5,6,8,10,14,22,24); lset ngammacat=4;

  [unlink all parameters for all partitions]
  prset ratepr=variable;
  unlink shape=(all) pinvar=(all) statefreq=(all) revmat=(all);




er_GTR ~ dnDirichlet(v(1, 1, 1, 1, 1, 1))
moves.append(mvBetaSimplex(er_GTR))
pi_GTR ~ dnDirichlet(v(1, 1, 1, 1))
moves.append(mvBetaSimplex(pi_GTR))
Q := fnGTR(er_GTR,pi_GTR)

prop_inv ~ dnBeta(1, 1)
moves.append(mvScale(prop_inv))

site_rates_shape ~ dnUniform(0,1E7)
moves.append(mvScale(site_rates_shape))
num_rate_categories <- 4
site_rates := fnDiscretizeGamma(site_rates_shape, site_rates_shape, num_rate_categories)

##############
# Tree Model #
##############

out_group = clade("WSSV")
topology ~ dnUniformTopology(taxa, outgroup=out_group)
moves.append( mvNNI(topology, weight=num_taxa/2.0) )
moves.append( mvSPR(topology, weight=num_taxa/10.0) )

branch_hypershape ~ dnExponential(1)
moves.append(mvScale(branch_hypershape))

for(i in 1:num_branches){
   branch_lengths[i] ~ dnExponential(branch_hypershape)
    moves.append(mvScale(branch_lengths[i]))
}

psi := fnTreeAssembly(topology, branch_lengths)

phylo ~ dnPhyloCTMC(tree=psi, Q=Q, type="DNA", pInv=prop_inv, siteRates=site_rates)

phylo.clamp(data)

mymodel =  model(topology)

########
# MCMC #
########

monitors.append( mnModel(filename="Revbayes_parameter.log", printgen=10) )
monitors.append( mnFile(filename="Revbayes_tree.log", printgen=10, psi) )

monitors.append( mnScreen(printgen=10) )

mymcmc = mcmc(mymodel, monitors, moves, nruns=4)
mymcmc.run(generations=100000)
