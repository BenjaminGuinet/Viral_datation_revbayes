#Summarizing Branch Length Distributions by Means and Variances

#In this step, we compute the means and variances of the posterior distributions of branch lengths using the 30000 trees obtained in step 1a.
# Please have a look at the script file scripts/1b_summarize_branch_lengths.rev.

################################################################################
# Options.

# Output directory.
outdir="/beegfs/data/bguinet/Cynipoidea_project/Viral_datation_revbayes/output/"
# File including trees obtained in step 1a.

tree_file="Virus_concatenated_alignment.nxs.trees"
#First, we specify the name of the file containing the trees, and the amount of thinning we apply (thinning = 5 means that we take every fifth tree):
# Only use every nth tree to calculate the posterior means and variances.
thinning = 5

################################################################################
# Retrieve the trees.

#Then, the trees are loaded and thinned:
# The function 'readBranchLengthTrees' expects a Nexus file, so we have to
# convert the trees into this format before reading the branch lengths.
file_trees_only = tree_file + "_trees_only.nxs"
tree_trace = readTreeTrace(outdir+tree_file,nrun=3)

tmp = tree_trace[1].getTrees()
tmp.append(tree_trace[2].getTrees())
tmp.append(tree_trace[3].getTrees())

writeNexus(outdir+file_trees_only, tmp)
tre = readBranchLengthTrees(outdir+file_trees_only)

print("Number of trees before thinning: ")
print(tre.size())

# Perform thinning.
index = 1
for (i in 1:tre.size()) {
  if (i % thinning == 0) {
    trees[index] = tre[i]
    index = index + 1
  }
}

print("Number of trees after thinning: ")
print(trees.size())

################################################################################
# Compute posterior means and variances.
#The posterior means and squared means (which will be used to calculate variances) are then computed:

print("Compute the posterior means and squared means of the branch lengths.")
num_branches = trees[1].nnodes()-1
bl_means <- rep(0.0,num_branches)
bl_squaredmeans <- rep(0.0,num_branches)

# Extract the posterior branch lengths. The index `i` is traversing the trees,
# the index `j` is traversing the branches.
for (i in 1:(trees.size())) {
  for (j in 1:num_branches ) {
    bl_means[j] <- bl_means[j] + trees[i].branchLength(j)
    bl_squaredmeans[j] <- bl_squaredmeans[j] + trees[i].branchLength(j)^2
    }
}

# Compute the posterior means and squared means.
for (j in 1:num_branches ) {
  bl_means[j] <- bl_means[j] / (trees.size())
  bl_squaredmeans[j] <- bl_squaredmeans[j] / (trees.size())
}

################################################################################
# Save the posterior means in a separate tree.
#Finally, the posterior means and variances are stored in two trees having the same topology as the one used for inference.
# In this way we ensure that the posterior means and variances for the specific branches are tracked in a correct way.

print("Compute the tree with posterior means as branch lengths.")
meanTree = readBranchLengthTrees(outdir+file_trees_only)[1]

print("Original mean tree before changing branch lengths")
print(meanTree)

for (j in 1:num_branches ) {
  meanTree.setBranchLength(j, bl_means[j])
}

print("Tree with posterior means as branch lengths.")
print(meanTree)

writeNexus(outdir+tree_file+"_meanBL.nex", meanTree)
print("The tree with posterior mean branch lengths has been saved.")

################################################################################
# Save the posterior variances in a separate tree.
#We also save the posterior varainces in a separate tree so we can use them later.

print ("Compute tree with posterior variances as branch lengths.")
varTree = readBranchLengthTrees(outdir+file_trees_only)[1]

print("Original variance tree before changing branch lengths")
print(varTree)

# Here, the posterior variances are calculated using the well known formula
# Var(x) =E[X^2] - E[X]^2.
for (j in 1:num_branches ) {
  varTree.setBranchLength(j, abs ( bl_squaredmeans[j] - bl_means[j]^2) )
}

print("Tree with posterior variances as branch lengths.")
print(varTree)

writeNexus(outdir+tree_file+"_varBL.nex", varTree)
print("The tree with posterior variance branch lengths has been saved.")

q()
